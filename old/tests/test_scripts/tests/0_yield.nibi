(use "io")

(fn evaluate_item [x] [
  (<- (+ x 10))
  (throw "OH NO!")
])

(assert (eq 20 (evaluate_item 10)) "No dice")

# Check nested yields

(fn check_nest [x] [
  (loop (:= k 0) (< k x) (set k (+ k 1)) [
    (if (eq 0 k) (<- k))
    (io::println "You shouldn't see this")
  ])
  (<- x)
])

(assert (neq 5 (check_nest 5)) "Failed to return from nest")

# check data lists

(fn checkl [in] [
  (:= result [])
  (iter in x (|< result x))
  (<- result)
])

(assert (eq [1 2 3] (checkl [1 2 3])) "Failed to return list")

# Returned data lists should resolve symbols

(:= a 9)

(fn data_list [x] (<- [a x 3 4]))

(assert (eq [9 13 3 4] (data_list 13)) "Failed to return data list")

(io::println "COMPLETE")
