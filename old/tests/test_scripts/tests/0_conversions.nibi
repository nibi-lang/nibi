(use "io")

(:= pi ["3" "." "1" "4" "1" "5" "9" "0"])

(assert (eq pi (split 3.14159)) "")

(assert (eq 42 (int 42.0)) "")

(assert (eq 42.00 (float 42)) "")
(assert (eq "3.141590" (str 3.14159)) "")

(try [
  (:= x (int "THIS NO WORK"))
  (assert (eq 1 0) "Should not get here")
] (io::println "We expected this error >>> " $e))
  
(try [
  (:= x (float "THIS NO WORK"))
  (assert (eq 1 0) "Should not get here")
] (io::println "We expected this error >>> " $e))


(:= x 88)

(assert (eq [[1 2 3] [88 5 6] [7 8 9] [10]] (split [1 2 3 x 5 6 7 8 9 10] 3)) "")
(assert (eq [1 2 3 88 5 6 7 8 9 10] (split [1 2 3 x 5 6 7 8 9 10] 0)) "")
(assert (eq [[1 2] [3 88] [5 6] [7 8] [9 10]] (split [1 2 3 x 5 6 7 8 9 10] 2)) "")

(assert (eq "string" (type (str 33))))
(assert (eq "i64" (type (int 33.33))))
(assert (eq "f64" (type (float "33.33"))))

(assert (eq "f32" (type (f32 "33.33"))))
(assert (eq "f64" (type (f64 "33.33"))))

(assert (eq "i8" (type (i8 33.33))))
(assert (eq "i16" (type (i16 33.33))))
(assert (eq "i32" (type (i32 33.33))))
(assert (eq "i64" (type (i64 33.33))))

(assert (eq "u8" (type (u8 33.33))))
(assert (eq "u16" (type (u16 33.33))))
(assert (eq "u32" (type (u32 33.33))))
(assert (eq "u64" (type (u64 33.33))))

(io::println "complete")
