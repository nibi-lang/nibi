# Author: Josh Bosley
#
# About:
# List function extensions and filters
# on lists.
#
# Example usage:
# (use "io")
# (io::println 
#   (filter_even [1 2 3 4 5 6 7 8 9 10]))
# (io::println 
#   (filter_odd [1 2 3 4 5 6 7 8 9 10]))
# (io::println (map [1 2 3 4] (fn [x] (<- (* x 2)))))

# Filter a list by a function
#   The function must return `true` of `false` for each 
#   member that it is passed.
(fn filter [_list _fn] [
  (:= result [])
  (iter _list _x [
    (if (eq true (_fn _x)) (|< result _x))
  ])
  (<- result)
])

# Filter a list and return even numbers
(macro filter_even [_list]
  (filter %_list (fn [_x] (eq false (% _x 2)))))

# Filter a list and return odd numbers
(macro filter_odd [_list]
  (filter %_list (fn [_x] (eq true (% _x 2)))))

# Iterate over a map and apply a function to each value
#   this function modifies the input, it does
#   not return a new list
(fn map [_list _action]
  (iter _list _x (set _x (_action _x))))

# Return the last element of a list
# as an editable reference
(macro list_back [_list]
  (at %_list (- (len %_list) 1)))

# Return the nth element of a list
# as an editable reference
# Note: If the index is out of bounds
#       this will return a nil
#       and not throw an error
#       this allows for easy appending
#       to a list without risk of throwing
(macro list_nth [_list _n]
  (if (eq true (>= %_n (len %_list)))
      (nop) # Returns a nil
      (at %_list %_n)))

# Check if a list contains at least one instance of an item
(macro list_contains [_list _item]
  (< 0 (len (filter %_list (fn [_x] (eq _x %_item))))))

# Walk a data list and execute each
# item in the list
(macro list_execute [_list]
  (iter %_list _x (nop)))
