# Author: Josh Bosley
#
# About:
# Simple expansion macros for the language
# that are used in the standard library
# and can be used to simplify user code 

# Expand to an always true conditional expression
(macro always []
  (eq true true))

# Expand to an always false conditional expression
(macro never []
  (eq true false))

# Expand to an expression that ensures that the type
#  AND value of two things are equivalent
(macro strict_eq [_a _b] 
  (and (eq (type %_a) (type %_b))
       (eq (str %_a)  (str %_b))))

# Check it a symbol exists in the current scope
# and return true if it does, false otherwise
# - This macro makes and calls an anonymous function
#   that tries to get the type of the symbol and
#   if it succeeds, it returns true, otherwise it
#   returns false
(macro sym_exists [_sym]
  ((fn [] 
    (try [
      (type %_sym)
      (<- true)]
      (<- false)))))

