(use "sys")

(if (eq "windows" (sys::platform))
  (throw "Network module is not windows compatible"))

(fn net_const [_const]
  (extern-call "modules/net/net.lib" "nibi_net_get_const" [:str] :i64 _const))

(fn inet_addr [_str_addr]
    (extern-call "modules/net/net.lib" "nibi_net_inet_addr" [:str] :i32 _str_addr))

(fn errno []
  (extern-call "modules/net/net.lib" "nibi_net_errno" [] :i64))

(fn htonl [_hostlong]
  (extern-call nil "htonl" [:u32] :u32 (u32 _hostlong)))

(fn htons [_hostshort]
  (extern-call nil "htons" [:u16] :u16 (u16 _hostshort)))

(fn ntohl [_netlong]
  (extern-call nil "ntohl" [:u32] :u32 (u32 _netlong)))

(fn ntohs [_netshort]
  (extern-call nil "ntohs" [:u16] :u16 (u16 _netshort)))

(fn socket [_domain _type _protocol]
  (extern-call nil "socket" [:i64 :i64 :i64] :i64 (i64 _domain) (i64 _type) (i64 _protocol)))

(fn close [_fd]
  (extern-call nil "close" [:i64] :i64 (i64 _fd)))

(fn setsockopt [_fd _level _opt_name _opt] 
  (extern-call "modules/net/net.lib" "nibi_net_setsocketopt" [:i64 :i64 :i64 :i64] :i64
    _fd _level _opt_name _opt))

(fn sockaddr_in [_family _port _addr]
  (extern-call "modules/net/net.lib" "nibi_net_sockaddr_in" [:i64 :i64 :i64] :ptr
    (i64 _family) (i64 _port) (i64 _addr)))

(fn bind [_fd _sockaddr_in]
    (extern-call "modules/net/net.lib" "nibi_net_bind" [:i64 :ptr] :i64 (i64 _fd) _sockaddr_in))

(fn listen [_fd _backlog]
  (extern-call nil "listen" [:i64 :i64] :i64 (i64 _fd) (i64 _backlog)))

(fn connect [_fd _sockaddr_in]
    (extern-call "modules/net/net.lib" "nibi_net_connect" [:i64 :ptr] :i64 (i64 _fd) _sockaddr_in))

(fn accept [_fd _sockaddr_in]
    (extern-call "modules/net/net.lib" "nibi_net_accept" [:i64 :ptr] :i64 (i64 _fd) _sockaddr_in))

(fn read [_fd _buffer]
  (extern-call "modules/net/net.lib" "nibi_net_read" [:i64 :str :i64] :i64 (i64 _fd) _buffer (len _buffer)))

(fn send [_fd _data _flags]
  (extern-call nil "send" [:i64 :str :i64 :i64] :i64 (i64 _fd) _data (len _data) (i64 _flags)))

(fn shutdown [_fd _how]
  (extern-call nil "shutdown" [:i64 :i64] :i64 (i64 _fd) (i64 _how)))
