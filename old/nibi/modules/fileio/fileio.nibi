(use "sys")

(if (eq false (eq "linux" (sys::platform)))
  (throw "fileio module is linux only"))


# File I/O
# \author Josh Bosley (2023)

# \brief checks if a file mode is valid
# \param mode file mode
# \return true if valid, false otherwise
(fn _valid_mode [mode] [
  (iter ["r" "rb" "w" "wb" "a" "ab" "r+" "rb+" "w+" "wb+" "a+" "ab+"] x 
    (if (eq mode x) (<- true)))
  (<- false)
])

# \brief fopen for files
# \param path path to file
# \param mode file mode
# \return file pointer
(fn fopen [path mode] [
  (if (not (_valid_mode mode)) throw "Invalid file mode")
  (:= fptr(extern-call nil "fopen" [:str :str] :ptr path mode))
  (if (not (mem-is-set fptr))  (throw "Failed to open file"))
  (<- fptr)
])

# \brief fclose for files
# \param fptr file pointer
# \return 0 on success, EOF on failure
(fn fclose [fptr] [
  (if (eq 0 fptr) (<- -1))
  (if (eq 0 (extern-call nil "fclose" [:ptr] :int fptr))
      (set fptr 0)
      (<- -1))
])

# \brief fputs for files
# \param fptr file pointer
# \param x string to write
# \return number of characters written
(fn fputs [fptr x]
  (extern-call nil "fputs" [:str :ptr] :int x fptr))

# \brief printf for files
# \param fptr file pointer
# \param fmt format string
# \param x data to print
# \return number of characters printed
(fn fprintf [fptr fmt x]
  (extern-call nil "fprintf" [:ptr :str :str] :int fptr fmt x))

# \brief fwrite for files
# \param fptr file pointer
# \param data data pointer to write
# \param datum_size size of each datum
# \param data_len number of data to write
# \return number of data written
(fn fwrite [fptr data datum_size data_len]
  (extern-call nil "fwrite" [:ptr :u64 :u64 :ptr] :int data datum_size data_len fptr))

# \brief Retrieve n chars from file as string
# \param fptr file pointer
# \param n_bytes number of bytes to read
# \returns string of n bytes if data exists, empty
#          string otherwise.
# \note In the event n_bytes > remaining bytes remaining
#       then a newline `\n` will be added via external lib
(fn fgets [fptr n_bytes] [
  (:= data (mem-new n_bytes))
  (:= call_result (extern-call nil "fgets" [:ptr :u64 :ptr] :ptr data (u64 (+ 1 n_bytes)) fptr))
  (:= result_cell (mem-load :str data))
  (mem-del data)
  (if (eq 0 call_result) (<- "") (<- result_cell))
])

# \brief Retrieve 1 char from file
# \param fptr file pointer
# \returns char if success, emty string otherwise
(fn fgetc [fptr] [
  (:= result (fgets fptr 1))
  (if (neq 0 (len result))
    (<- (at (split result) 0)))
  (<- result)
])

# \brief Check if at eof
# \param fptr file pointer
# \returns true iff pointer at eof
(fn feof [fptr]
  (extern-call nil "feof" [:ptr] :i64 fptr))

# \brief Get the current offset of file
# \param fptr file pointer
(fn ftell [fptr]
  (extern-call nil "ftell" [:ptr] :i64 fptr))

# \brief Rewind file to beginning of file
# \param fptr file pointer
(fn rewind [fptr]
  (extern-call nil "rewind" [:ptr] :nil fptr))

# \brief Clear an error
# \param ptr file pointer
(fn clearerr [fptr]
  (extern-call nil "clearerr" [:ptr] :nil fptr))

# \brief Check if there is an error in the stream
# \param fptr file pointer
(fn ferror [fptr]
  (extern-call nil "ferror" [:ptr] :i64 fptr))

# \brief Seek to location
# \param ptr file pointer
# \param offset offset of location
# \param whence where to start offset from
(fn fseek [fptr offset whence]
  (extern-call nil "fseek" [:ptr :i64 :int] :i64 fptr (i64 offset) (i64 whence)))

