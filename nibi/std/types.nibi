# Author: Josh Bosley
#
# About:
# Simplify type checking functions for the interpreter
# by ensuring that the user doesn't have to remember
# each possible type name in its string form.
# It also adds some functionality like `is_numeric`
# etc

(fn is_nil [_x] 
  (eq (type _x) "nil"))

(fn is_dict [_x]
  (eq (type _x) "dict"))

(fn is_i8 [_x] (eq (type _x) "i8"))
(fn is_i16 [_x] (eq (type _x) "i16"))
(fn is_i32 [_x] (eq (type _x) "i32"))
(fn is_i64 [_x] (eq (type _x) "i64"))

(fn is_u8 [_x] (eq (type _x) "u8"))
(fn is_u16 [_x] (eq (type _x) "u16"))
(fn is_u32 [_x] (eq (type _x) "u32"))
(fn is_u64 [_x] (eq (type _x) "u64"))

(fn is_f32 [_x] (eq (type _x) "f32"))
(fn is_f64 [_x] (eq (type _x) "f64"))
(fn is_ptr [_x] (eq (type _x) "ptr"))

(fn is_int [_x] [
  (iter ["i8" "i16" "i32" "i64" "u8" "u16" "u32" "u64"] _t
    (if (eq _t (type _x)) (<- true)))
  (<- false)
])

(fn is_f32 [_x]
  (eq (type _x) "f32"))

(fn is_f64 [_x]
  (eq (type _x) "f64"))

(fn is_float [_x] [
  (iter ["f32" "f64"] _t
    (if (eq _t (type _x)) (<- true)))
  (<- false)
])

(fn is_char [_x]
  (eq (type _x) "char"))

(fn is_string [_x]
  (eq (type _x) "string"))

(fn is_bool [_x]
  (and (is_int _x) (or (eq _x 0) (eq _x 1))))

(fn is_data_list [_x]
  (eq (type _x) "list:data"))

(fn is_ins_list [_x]
  (eq (type _x) "list:instruction"))

(fn is_list [_x]
  (or (eq (type _x) "list")
    (or (is_data_list _x) (is_ins_list _x))))

(fn is_symbol [_x]
  (eq (type _x) "symbol"))

(fn is_fn [_x]
  (eq (type _x) "function"))

(fn is_env [_x]
  (eq (type _x) "environment"))

(fn is_aberrant [_x]
  (eq (type _x) "aberrant"))

(fn is_unknown [_x]
  (eq (type _x) "unknown"))

(fn is_numeric [_x]
  (or (is_int _x) (is_float _x)))

