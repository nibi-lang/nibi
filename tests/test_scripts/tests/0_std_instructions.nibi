# Lists

(:= test_list [1 2 3 4 5 6 7 8 9 10])

(assert (eq [2 4 6 8 10] (filter_even test_list)))

(assert (eq [1 3 5 7 9] (filter_odd test_list)))

(map test_list (fn [x] (<- (* x 2))))

(assert (eq [2 4 6 8 10 12 14 16 18 20] test_list))

(set test_list [1 2 3 4])

(assert (eq 4 (list_back test_list)))

(set (list_back test_list) 5)

(assert (eq [1 2 3 5] test_list))

(set (list_nth test_list 2) 4)

(assert (eq [1 2 4 5] test_list))

# oob shouldn't throw, just return nil
# and not complain

(assert (eq nil (list_nth test_list 100)))

(set (list_nth test_list 100) 3)

(assert (eq [1 2 4 5] test_list))

# Loops

(:= x 0)
(while (< x 10) (set x (+ x 1)))
(assert (eq 10 x))

# - Forever will not be tested :P

# Macros

(assert (eq (always) 1))
(assert (eq (never) 0))

(assert (eq true (strict_eq 3 3)))
(assert (eq false (strict_eq 3 "3")))
(assert (eq false (strict_eq 3 3.33)))
(assert (eq true (strict_eq [1 2 3 4] [1 2 3 4])))

(assert (eq false (sym_exists I_DONT_EXIST)))
(assert (eq true (sym_exists test_list)))

(drop test_list)

(assert (eq false (sym_exists test_list)))

# Match

(fn test_match [value] [
  (<- (match value [
           ["moot" "toot"]
           [3 4]
           [3.3317 "float"]
         ]))
])

(assert (eq "toot" (test_match "moot")))
(assert (eq 4 (test_match 3)))
(assert (eq "float" (test_match 3.3317)))

# Types

(assert (eq true (is_nil nil)))
(assert (eq true (is_int 3)))
(assert (eq true (is_float 3.33)))
(assert (eq true (is_string "hello")))
(assert (eq true (is_list [1 2 3 4])))
(assert (eq true (is_fn (fn [] []))))
(assert (eq true (is_numeric 3)))
(assert (eq true (is_numeric 3.33)))
